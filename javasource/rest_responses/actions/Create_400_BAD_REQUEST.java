// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package rest_responses.actions;

import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;
import rest_responses.ErrorMessageProvider;
import rest_responses.RESTResponseProvider;
import java.util.UUID;

/**
 * The request could not be understood by the server due to malformed syntax.
 */
public class Create_400_BAD_REQUEST extends CustomJavaAction<IMendixObject>
{
	private final java.lang.String Title;
	/** @deprecated use HTTPResponse.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __HTTPResponse;
	private final system.proxies.HttpResponse HTTPResponse;
	private final java.lang.String Detail;
	private final java.lang.String TypeURI;
	/** @deprecated use com.mendix.utils.ListUtils.map(ValidationErrors, com.mendix.systemwideinterfaces.core.IEntityProxy::getMendixObject) instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final java.util.List<IMendixObject> __ValidationErrors;
	private final java.util.List<rest_responses.proxies.ValidationError> ValidationErrors;
	private final java.lang.String LogMessageDetails;

	public Create_400_BAD_REQUEST(
		IContext context,
		java.lang.String _title,
		IMendixObject _hTTPResponse,
		java.lang.String _detail,
		java.lang.String _typeURI,
		java.util.List<IMendixObject> _validationErrors,
		java.lang.String _logMessageDetails
	)
	{
		super(context);
		this.Title = _title;
		this.__HTTPResponse = _hTTPResponse;
		this.HTTPResponse = _hTTPResponse == null ? null : system.proxies.HttpResponse.initialize(getContext(), _hTTPResponse);
		this.Detail = _detail;
		this.TypeURI = _typeURI;
		this.__ValidationErrors = _validationErrors;
		this.ValidationErrors = java.util.Optional.ofNullable(_validationErrors)
			.orElse(java.util.Collections.emptyList())
			.stream()
			.map(validationErrorsElement -> rest_responses.proxies.ValidationError.initialize(getContext(), validationErrorsElement))
			.collect(java.util.stream.Collectors.toList());
		this.LogMessageDetails = _logMessageDetails;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		String title = this.Title;
		
		if(title == null || title.isEmpty()) {
			title = "Bad Request";
		}
		
		ErrorMessageProvider emp = new ErrorMessageProvider(getContext(), title, Detail, 400, TypeURI, ValidationErrors, LogMessageDetails);
		
		RESTResponseProvider rp = new RESTResponseProvider(this.context(), HTTPResponse.getMendixObject(), 400, emp.getJSONResponseMessage(), "Bad Request");
		
		return rp.getResponse();
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "Create_400_BAD_REQUEST";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
